<?xml version="1.0" encoding="UTF-8"?>

<Section xmlns="urn:com.io7m.structural:8:0"
         id="7b5157b1-d920-5631-aa71-9cfd86023749"
         title="Matrices">

  <Subsection id="413d476b-18f7-50e3-8017-51e68390bb84"
              title="Computation Types">
    <Paragraph>
      The <Term type="package">${project.parent.name}</Term> package provides square
      <Term type="term">computation</Term>
      matrices with single-precision
      <Term type="type">(float)</Term>
      elements, and double-precision
      <Term type="type">(double)</Term>
      elements. Each matrix type is available in 2x2, 3x3, and 4x4 versions. The package unambiguously identifies the
      matrix types by using the following naming conventions for the types (given as a simple EBNF grammar):
    </Paragraph>

    <FormalItem id="6c481733-f973-57dd-83eb-f2f8ab7c46bc"
                title="Matrix type naming">
      <Verbatim>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
                    href="matrices.ebnf"
                    parse="text"/>
      </Verbatim>
    </FormalItem>

    <Paragraph>
      Computation matrices are always immutable and are defined in such a way to allow the Java virtual machine to
      efficiently inline all matrix method calls and to eliminate the allocations of intermediate matrices
      via <Term type="term">escape analysis</Term>.
    </Paragraph>

    <Paragraph>
      The available matrix types include:
    </Paragraph>

    <FormalItem id="4f482ac4-a779-571f-8269-e1ef9ae42d39"
                title="Matrix types">
      <ListUnordered>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix2x2D.html">
            Matrix2x2D
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix3x3D.html">
            Matrix3x3D
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix4x4D.html">
            Matrix4x4D
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix2x2F.html">
            Matrix2x2F
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix3x3F.html">
            Matrix3x3F
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix4x4F.html">
            Matrix4x4F
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix2x2D.html">
            PMatrix2x2D
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix3x3D.html">
            PMatrix3x3D
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix4x4D.html">
            PMatrix4x4D
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix2x2F.html">
            PMatrix2x2F
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix3x3F.html">
            PMatrix3x3F
          </LinkExternal>
        </Item>
        <Item>
          <LinkExternal target="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix4x4F.html">
            PMatrix4x4F
          </LinkExternal>
        </Item>
      </ListUnordered>
    </FormalItem>
  </Subsection>

  <Subsection id="3a7ba982-8824-5c59-9595-738328c6d273"
              title="Storage Types">
    <Paragraph>
      The <Term type="package">${project.parent.name}</Term> package provides mutable
      <Term type="term">storage</Term>
      matrices. A <Term type="term">storage</Term> matrix is a mutable matrix upon which only very simple
      <Term type="term">get</Term>
      and <Term type="term">set</Term> operations are defined. The intention is to allow all intermediate computations
      to be written with immutable
      <Link target="2c74cadb-5390-547e-a620-247466a59427">computation</Link>
      matrices, with the final results of those computations being written to storage matrices in order to, for example,
      be passed directly to native code without requiring copying.
    </Paragraph>

    <Paragraph>
      To enumerate the available storage matrix types, see the API documentation for the
      <LinkExternal target="apidocs/com/io7m/jtensors/storage/api/MatrixStorageType.html">MatrixStorageType
      </LinkExternal>
      interface.
    </Paragraph>

    <Paragraph>
      Matrix data is stored in column-major format
      <LinkFootnote target="7d6e76f8-e13d-5624-967b-55d50a5ad8fc"/>, in whatever is the platform's native byte order.
      For an <Term type="expression">m x m</Term> square matrix, assuming that each element of the matrix uses
      <Term type="expression">n</Term>
      bytes, the first byte of the element at row
      <Term type="expression">r</Term>
      and column
      <Term type="expression">c</Term>
      (assuming <Term type="expression">0 &lt;= r &lt; m</Term> and
      <Term type="expression">0 &lt;= c &lt; m</Term>) can be found by
      <Term type="expression">(c * m * n) + (r * n)</Term>.
    </Paragraph>
    <FormalItem title="Column-major storage memory layout">
      <Image source="images/memory.png">Column-major storage memory layout</Image>
    </FormalItem>

    <Paragraph>
      So, the element at row <Term type="constant">0</Term>, column <Term type="constant">0</Term> would be stored in
      bytes <Term type="expression">[0 .. 3]</Term>. The element at row <Term type="constant">
      1</Term>, column <Term type="constant">0</Term> would be stored in bytes <Term type="expression">[4 .. 7]</Term>.
      The element at row <Term type="constant">0</Term>, column <Term type="constant">1</Term> would be stored in bytes
      <Term type="expression">[16 .. 19]</Term>, and so on.
    </Paragraph>
  </Subsection>

  <Subsection id="3bc36a21-afea-501e-8d6f-7248722fdf3d"
              title="Phantom Types">

    <Paragraph>
      As with the vector types, the <Term type="package">${project.parent.name}</Term> package provides copies of all
      the existing matrix types indexed by a pair of <Term type="term">phantom type parameters</Term>.
    </Paragraph>

    <Paragraph>
      Conceptually, a matrix can be considered as storing a transform from coordinate space
      <Term type="expression">T0</Term>
      to space <Term type="expression">T1</Term>. For a 4x4 matrix in the
      <Term type="package">${project.parent.name}</Term>
      package, this is denoted by the type
      <Term type="expression">PMatrix4x4D&lt;T0,T1&gt;</Term>. It then follows that when matrices are concatenated via
      multiplications, their type parameters are translated accordingly. For example, a matrix <Term type="expression">
      PMatrix4x4D&lt;T0,T1&gt;
    </Term> multiplied by a matrix
      <Term type="expression">PMatrix4x4D&lt;T1,T2&gt;</Term>
      results in a matrix of type
      <Term type="expression">PMatrix4x4D&lt;T0,T2&gt;</Term>. Inverting a matrix results in a matrix that represents
      the inverse of the original transform that the matrix represented. For example, inverting a matrix of type
      <Term type="expression">PMatrix4x4D&lt;T0,T1&gt;</Term>
      results in a matrix of type <Term type="expression">PMatrix4x4D&lt;T1,T0&gt;</Term>.
    </Paragraph>

    <Paragraph>
      Type parameters are also translated across multiplications by vectors. A multiplication of a vector of type
      <Term type="expression">PVector4D&lt;T0&gt;</Term>
      by a matrix of type
      <Term type="expression">PMatrix4x4D&lt;T0,T1&gt;</Term>
      results in a vector of type
      <Term type="expression">PVector4D&lt;T1&gt;</Term>.
    </Paragraph>

    <Paragraph>
      Being able to track the types of transforms at this level of detail is invaluable when using systems such as
      OpenGL, where accidentally mixing up matrices tends to result in visual anomalies that can be extremely hard to
      track down. By explicitly denoting coordinate spaces with empty types, it's possible to statically prevent all
      bugs involving accidentally mixing up matrices. It's also possible to prevent the incorrect construction of
      matrices <LinkFootnote target="64eb2cbe-887f-5966-aae9-83464d8efb7f"/>. Additionally, with each matrix labelled by
      the type of transform it represents, code becomes self-documenting.
    </Paragraph>

    <FormalItem title="Static tracking of transforms">
      <Verbatim>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
                    href="phantom-example.txt"
                    parse="text"/>
      </Verbatim>
    </FormalItem>
  </Subsection>

  <Footnote id="7d6e76f8-e13d-5624-967b-55d50a5ad8fc">
    The convention used by most programs using the
    <LinkExternal target="https://www.opengl.org">OpenGL</LinkExternal>
    API.
  </Footnote>

  <Footnote id="64eb2cbe-887f-5966-aae9-83464d8efb7f">
    It is common for people to make mistakes with matrix multiplication: The order of matrices is effectively the
    reverse of the order in which the transforms will be applied.
  </Footnote>

</Section>
