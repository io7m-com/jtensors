<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>com.io7m.jtensors 9.0.0 Documentation</title><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/><link rel="stylesheet" type="text/css" href="kstructural-layout.css"/><link rel="stylesheet" type="text/css" href="kstructural-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st300_body"><div class="st300_document_title">com.io7m.jtensors 9.0.0 Documentation</div><ul class="st300_contents st300_document_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_part"><a href="#st300_p1" title="Link to part 1: Package Information">1. Package Information</a><ul class="st300_contents st300_part_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p1s1" title="Link to section 1.1: Orientation">1.1. Orientation</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p1s2" title="Link to section 1.2: Installation">1.2. Installation</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p1s3" title="Link to section 1.3: Platform Specific Issues">1.3. Platform Specific Issues</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p1s4" title="Link to section 1.4: License">1.4. License</a></li></ul></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_part"><a href="#st300_p2" title="Link to part 2: Conventions">2. Conventions</a><ul class="st300_contents st300_part_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p2s1" title="Link to section 2.1: Vectors">2.1. Vectors</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p2s2" title="Link to section 2.2: Matrices">2.2. Matrices</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p2s3" title="Link to section 2.3: Quaternions">2.3. Quaternions</a></li></ul></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_part"><a href="#st300_p3" title="Link to part 3: API">3. API</a><ul class="st300_contents st300_part_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_section"><a href="#st300_p3s1" title="Link to section 3.1: JavaDoc">3.1. JavaDoc</a></li></ul></li></ul><div class="st300_part_container"><a id="pkg"/><div class="st300_part_title_number"><a id="st300_p1" href="#st300_p1" title="Part 1: Package Information">1</a></div><div class="st300_part_title">Package Information</div><ul class="st300_contents st300_part_contents_outer st300_part_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p1s1" title="Link to section 1.1: Orientation">1.1. Orientation</a><ul class="st300_contents st300_section_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p1s1ss1" title="Link to subsection 1.1.1: Overview">1.1.1. Overview</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p1s1ss2" title="Link to subsection 1.1.2: Efficiency">1.1.2. Efficiency</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p1s1ss3" title="Link to subsection 1.1.3: Correctness">1.1.3. Correctness</a></li></ul></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p1s2" title="Link to section 1.2: Installation">1.2. Installation</a><ul class="st300_contents st300_section_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p1s2ss1" title="Link to subsection 1.2.1: Source compilation">1.2.1. Source compilation</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p1s2ss2" title="Link to subsection 1.2.2: Maven">1.2.2. Maven</a></li></ul></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p1s3" title="Link to section 1.3: Platform Specific Issues">1.3. Platform Specific Issues</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p1s4" title="Link to section 1.4: License">1.4. License</a></li></ul><div class="st300_section_container"><a id="pkg.orientation"/><div class="st300_section_title_number"><a id="st300_p1s1" href="#st300_p1s1" title="Section 1.1: Orientation">1.1</a></div><div class="st300_section_title">Orientation</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p1s1ss1" title="Link to subsection 1.1.1: Overview">1.1.1. Overview</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p1s1ss2" title="Link to subsection 1.1.2: Efficiency">1.1.2. Efficiency</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p1s1ss3" title="Link to subsection 1.1.3: Correctness">1.1.3. Correctness</a></li></ul><div class="st300_subsection_container"><a id="pkg.orientation.overview"/><div class="st300_subsection_title_number"><a id="st300_p1s1ss1" href="#st300_p1s1ss1" title="Subsection 1.1.1: Overview">1.1.1</a></div><div class="st300_subsection_title">Overview</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s1ss1c1" href="#st300_p1s1ss1c1" title="Paragraph 1.1.1.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package implements a set of efficient vector, matrix, and quaternion classes intended for use in computer graphics applications.</div></div></div><div class="st300_subsection_container"><a id="pkg.orientation.efficiency"/><div class="st300_subsection_title_number"><a id="st300_p1s1ss2" href="#st300_p1s1ss2" title="Subsection 1.1.2: Efficiency">1.1.2</a></div><div class="st300_subsection_title">Efficiency</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s1ss2c1" href="#st300_p1s1ss2c1" title="Paragraph 1.1.2.1">1</a></div><div class="st300_paragraph">The package uses simple and efficient algorithms for all operations. The design of the package distinguishes between <span class="st300_term term">computation</span> and <span class="st300_term term">storage</span> tensors. This allows code that computes with vectors to consist entirely of <span class="st300_term term">static</span>, <span class="st300_term term">monomorphic</span> method calls - the type of code that produces the best results under Java virtual machines that use JIT compilation.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s1ss2c2" href="#st300_p1s1ss2c2" title="Paragraph 1.1.2.2">2</a></div><div class="st300_paragraph">The package also provides <span class="st300_term term">storage</span> tensors that are backed by direct memory, allowing for zero-copy sharing of structures with native code.</div></div></div><div class="st300_subsection_container"><a id="pkg.orientation.correctness"/><div class="st300_subsection_title_number"><a id="st300_p1s1ss3" href="#st300_p1s1ss3" title="Subsection 1.1.3: Correctness">1.1.3</a></div><div class="st300_subsection_title">Correctness</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s1ss3c1" href="#st300_p1s1ss3c1" title="Paragraph 1.1.3.1">1</a></div><div class="st300_paragraph">The package includes a large battery of automated tests that attempt to verify the correctness of the included implementations. As of the time of writing, the tests manage 100% coverage for all code.</div></div></div></div><div class="st300_section_container"><a id="pkg.install"/><div class="st300_section_title_number"><a id="st300_p1s2" href="#st300_p1s2" title="Section 1.2: Installation">1.2</a></div><div class="st300_section_title">Installation</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p1s2ss1" title="Link to subsection 1.2.1: Source compilation">1.2.1. Source compilation</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p1s2ss2" title="Link to subsection 1.2.2: Maven">1.2.2. Maven</a></li></ul><div class="st300_subsection_container"><a id="pkg.install.source"/><div class="st300_subsection_title_number"><a id="st300_p1s2ss1" href="#st300_p1s2ss1" title="Subsection 1.2.1: Source compilation">1.2.1</a></div><div class="st300_subsection_title">Source compilation</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s2ss1c1" href="#st300_p1s2ss1c1" title="Paragraph 1.2.1.1">1</a></div><div class="st300_paragraph">The project can be compiled and installed with <a class="st300_link_external" href="http://maven.apache.org">Maven</a>:</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s2ss1c2" href="#st300_p1s2ss1c2" title="Paragraph 1.2.1.2">2</a></div><div class="st300_paragraph"><pre class="st300_verbatim example">$ mvn -C clean install</pre></div></div></div><div class="st300_subsection_container"><a id="pkg.install.maven"/><div class="st300_subsection_title_number"><a id="st300_p1s2ss2" href="#st300_p1s2ss2" title="Subsection 1.2.2: Maven">1.2.2</a></div><div class="st300_subsection_title">Maven</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s2ss2c1" href="#st300_p1s2ss2c1" title="Paragraph 1.2.2.1">1</a></div><div class="st300_paragraph">Regular releases are made to the <a class="st300_link_external" href="http://search.maven.org/#search%7Cga%7C1%7Ccom.io7m.jtensors">Central Repository</a>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s2ss2c2" href="#st300_p1s2ss2c2" title="Paragraph 1.2.2.2">2</a></div><div class="st300_paragraph">All <a class="st300_link_external" href="http://io7m.com">io7m.com</a> packages use Semantic Versioning <span class="st300_footnote_reference">[<a href="#st300_f_250_0" id="st300_fr_208" title="Jump to footnote semver (reference 0)">0</a>]</span>, which implies that it is always safe to use version ranges with an exclusive upper bound equal to the next major version - the API of the package will not change in a backwards-incompatible manner before the next major version.</div></div></div></div><div class="st300_section_container"><a id="pkg.platform"/><div class="st300_section_title_number"><a id="st300_p1s3" href="#st300_p1s3" title="Section 1.3: Platform Specific Issues">1.3</a></div><div class="st300_section_title">Platform Specific Issues</div><span/><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s3ss2c1" href="#st300_p1s3ss2c1" title="Paragraph 1.3.2.1">1</a></div><div class="st300_paragraph">There are no known platform-specific issues.</div></div></div><div class="st300_section_container"><a id="pkg.license"/><div class="st300_section_title_number"><a id="st300_p1s4" href="#st300_p1s4" title="Section 1.4: License">1.4</a></div><div class="st300_section_title">License</div><span/><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p1s4ss2c1" href="#st300_p1s4ss2c1" title="Paragraph 1.4.2.1">1</a></div><div class="st300_paragraph">All files distributed with the <span class="st300_term package">com.io7m.jtensors</span> package are placed under the following license:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p1s4ss2c2" href="#st300_p1s4ss2c2" title="Formal item 1.4.2.2: License">1.4.2.2 License</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim license">Copyright © 2017 &lt;code@io7m.com&gt; http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</pre></div></div></div></div><div class="st300_part_container"><a id="conventions"/><div class="st300_part_title_number"><a id="st300_p2" href="#st300_p2" title="Part 2: Conventions">2</a></div><div class="st300_part_title">Conventions</div><ul class="st300_contents st300_part_contents_outer st300_part_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p2s1" title="Link to section 2.1: Vectors">2.1. Vectors</a><ul class="st300_contents st300_section_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p2s1ss1" title="Link to subsection 2.1.1: Computation Types">2.1.1. Computation Types</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p2s1ss2" title="Link to subsection 2.1.2: Storage Types">2.1.2. Storage Types</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p2s1ss3" title="Link to subsection 2.1.3: Phantom Types">2.1.3. Phantom Types</a></li></ul></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p2s2" title="Link to section 2.2: Matrices">2.2. Matrices</a><ul class="st300_contents st300_section_contents"><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p2s2ss1" title="Link to subsection 2.2.1: Computation Types">2.2.1. Computation Types</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p2s2ss2" title="Link to subsection 2.2.2: Storage Types">2.2.2. Storage Types</a></li><li class="st300_contents_item st300_contents_item2 st300_contents_item_subsection"><a href="#st300_p2s2ss3" title="Link to subsection 2.2.3: Phantom Types">2.2.3. Phantom Types</a></li></ul></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p2s3" title="Link to section 2.3: Quaternions">2.3. Quaternions</a></li></ul><div class="st300_section_container"><a id="conventions.vectors"/><div class="st300_section_title_number"><a id="st300_p2s1" href="#st300_p2s1" title="Section 2.1: Vectors">2.1</a></div><div class="st300_section_title">Vectors</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p2s1ss1" title="Link to subsection 2.1.1: Computation Types">2.1.1. Computation Types</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p2s1ss2" title="Link to subsection 2.1.2: Storage Types">2.1.2. Storage Types</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p2s1ss3" title="Link to subsection 2.1.3: Phantom Types">2.1.3. Phantom Types</a></li></ul><div class="st300_subsection_container"><a id="conventions.vectors.computation_types"/><div class="st300_subsection_title_number"><a id="st300_p2s1ss1" href="#st300_p2s1ss1" title="Subsection 2.1.1: Computation Types">2.1.1</a></div><div class="st300_subsection_title">Computation Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss1c1" href="#st300_p2s1ss1c1" title="Paragraph 2.1.1.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides <span class="st300_term term">computation</span> vectors with single-precision <span class="st300_term type">(float)</span> elements, double-precision <span class="st300_term type">(double)</span> elements, integer <span class="st300_term type">(int)</span>, and long integer <span class="st300_term type">(long)</span> elements. Each vector type is available in two, three, and four element versions. The package unambiguously identifies the vector types by using the following naming conventions for the types (given as a simple EBNF grammar) :</div></div><div class="st300_formal_item"><a id="conventions.vectors.naming"/><div class="st300_formal_item_title"><a id="st300_p2s1ss1c2" href="#st300_p2s1ss1c2" title="Formal item 2.1.1.2: Vector type naming">2.1.1.2 Vector type naming</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">prefix       = "Vector" | "PVector" ;
size         = "2" | "3" | "4" ;
element_type = "I" | "L" | "F" | "D" ;
type         = prefix , size , element_type ;
</pre></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss1c3" href="#st300_p2s1ss1c3" title="Paragraph 2.1.1.3">3</a></div><div class="st300_paragraph">Computation vectors are always immutable and are defined in such a way to allow the Java virtual machine to efficiently inline all vector method calls and to eliminate the allocations of intermediate vectors via <span class="st300_term term">escape analysis</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss1c4" href="#st300_p2s1ss1c4" title="Paragraph 2.1.1.4">4</a></div><div class="st300_paragraph">The available vector types include:</div></div><div class="st300_formal_item"><a id="conventions.vectors.available"/><div class="st300_formal_item_title"><a id="st300_p2s1ss1c5" href="#st300_p2s1ss1c5" title="Formal item 2.1.1.5: Vector types">2.1.1.5 Vector types</a></div><div class="st300_formal_item_content"><ul class="st300_list_unordered"><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2D.html">Vector2D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3D.html">Vector3D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4D.html">Vector4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2F.html">Vector2F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3F.html">Vector3F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4F.html">Vector4F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2I.html">Vector2I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3I.html">Vector3I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4I.html">Vector4I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2L.html">Vector2L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3L.html">Vector3L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4L.html">Vector4L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2D.html">PVector2D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3D.html">PVector3D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4D.html">PVector4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2F.html">PVector2F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3F.html">PVector3F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4F.html">PVector4F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2I.html">PVector2I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3I.html">PVector3I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4I.html">PVector4I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2L.html">PVector2L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3L.html">PVector3L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4L.html">PVector4L</a></li></ul></div></div></div><div class="st300_subsection_container"><a id="conventions.vectors.storage_types"/><div class="st300_subsection_title_number"><a id="st300_p2s1ss2" href="#st300_p2s1ss2" title="Subsection 2.1.2: Storage Types">2.1.2</a></div><div class="st300_subsection_title">Storage Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss2c1" href="#st300_p2s1ss2c1" title="Paragraph 2.1.2.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides mutable <span class="st300_term term">storage</span> vectors. A <span class="st300_term term">storage</span> vector is a mutable vector upon which only very simple <span class="st300_term term">get</span> and <span class="st300_term term">set</span> operations are defined. The intention is to allow all intermediate computations to be written with immutable <a class="st300_link" href="#conventions.vectors.computation_types">computation</a> vectors, with the final results of those computations being written to storage vectors in order to, for example, be passed directly to native code without requiring copying.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss2c2" href="#st300_p2s1ss2c2" title="Paragraph 2.1.2.2">2</a></div><div class="st300_paragraph">To enumerate the available storage vector types, see the API documentation for the <a class="st300_link_external" href="apidocs/com/io7m/jtensors/storage/api/VectorStorageType.html">VectorStorageType</a> interface.</div></div></div><div class="st300_subsection_container"><a id="conventions.vectors.phantom"/><div class="st300_subsection_title_number"><a id="st300_p2s1ss3" href="#st300_p2s1ss3" title="Subsection 2.1.3: Phantom Types">2.1.3</a></div><div class="st300_subsection_title">Phantom Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss3c1" href="#st300_p2s1ss3c1" title="Paragraph 2.1.3.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package also provides copies of the existing vector types indexed by a phantom type parameter in order to allow the programmer to make semantically distinct values type-incompatible <span class="st300_footnote_reference">[<a href="#st300_f_669_0" id="st300_fr_667" title="Jump to footnote conventions.vectors.phantom.article (reference 0)">1</a>]</span>.</div></div></div></div><div class="st300_section_container"><a id="conventions.matrices"/><div class="st300_section_title_number"><a id="st300_p2s2" href="#st300_p2s2" title="Section 2.2: Matrices">2.2</a></div><div class="st300_section_title">Matrices</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p2s2ss1" title="Link to subsection 2.2.1: Computation Types">2.2.1. Computation Types</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p2s2ss2" title="Link to subsection 2.2.2: Storage Types">2.2.2. Storage Types</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="#st300_p2s2ss3" title="Link to subsection 2.2.3: Phantom Types">2.2.3. Phantom Types</a></li></ul><div class="st300_subsection_container"><a id="conventions.matrices.computation_types"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss1" href="#st300_p2s2ss1" title="Subsection 2.2.1: Computation Types">2.2.1</a></div><div class="st300_subsection_title">Computation Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss1c1" href="#st300_p2s2ss1c1" title="Paragraph 2.2.1.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides square <span class="st300_term term">computation</span> matrices with single-precision <span class="st300_term type">(float)</span> elements, and double-precision <span class="st300_term type">(double)</span> elements. Each matrix type is available in 2x2, 3x3, and 4x4 versions. The package unambiguously identifies the matrix types by using the following naming conventions for the types (given as a simple EBNF grammar) :</div></div><div class="st300_formal_item"><a id="conventions.matrices.naming"/><div class="st300_formal_item_title"><a id="st300_p2s2ss1c2" href="#st300_p2s2ss1c2" title="Formal item 2.2.1.2: Matrix type naming">2.2.1.2 Matrix type naming</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">prefix       = "Matrix" | "PMatrix"
size         = "2x2" | "3x3" | "4x4" ;
element_type = "F" | "D" ;
type         = prefix , size , element_type ;</pre></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss1c3" href="#st300_p2s2ss1c3" title="Paragraph 2.2.1.3">3</a></div><div class="st300_paragraph">Computation matrices are always immutable and are defined in such a way to allow the Java virtual machine to efficiently inline all matrix method calls and to eliminate the allocations of intermediate matrices via <span class="st300_term term">escape analysis</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss1c4" href="#st300_p2s2ss1c4" title="Paragraph 2.2.1.4">4</a></div><div class="st300_paragraph">The available matrix types include:</div></div><div class="st300_formal_item"><a id="conventions.matrices.available"/><div class="st300_formal_item_title"><a id="st300_p2s2ss1c5" href="#st300_p2s2ss1c5" title="Formal item 2.2.1.5: Matrix types">2.2.1.5 Matrix types</a></div><div class="st300_formal_item_content"><ul class="st300_list_unordered"><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix2D.html">Matrix2x2D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix3D.html">Matrix3x3D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix4D.html">Matrix4x4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix2F.html">Matrix2x2F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix3F.html">Matrix3x3F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix4F.html">Matrix4x4F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix2D.html">PMatrix2x2D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix3D.html">PMatrix3x3D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix4D.html">PMatrix4x4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix2F.html">PMatrix2x2F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix3F.html">PMatrix3x3F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix4F.html">PMatrix4x4F</a></li></ul></div></div></div><div class="st300_subsection_container"><a id="conventions.matrices.storage_types"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss2" href="#st300_p2s2ss2" title="Subsection 2.2.2: Storage Types">2.2.2</a></div><div class="st300_subsection_title">Storage Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss2c1" href="#st300_p2s2ss2c1" title="Paragraph 2.2.2.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides mutable <span class="st300_term term">storage</span> matrices. A <span class="st300_term term">storage</span> matrix is a mutable matrix upon which only very simple <span class="st300_term term">get</span> and <span class="st300_term term">set</span> operations are defined. The intention is to allow all intermediate computations to be written with immutable <a class="st300_link" href="#conventions.matrices.computation_types">computation</a> matrices, with the final results of those computations being written to storage matrices in order to, for example, be passed directly to native code without requiring copying.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss2c2" href="#st300_p2s2ss2c2" title="Paragraph 2.2.2.2">2</a></div><div class="st300_paragraph">To enumerate the available storage matrix types, see the API documentation for the <a class="st300_link_external" href="apidocs/com/io7m/jtensors/storage/api/MatrixStorageType.html">MatrixStorageType</a> interface.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss2c3" href="#st300_p2s2ss2c3" title="Paragraph 2.2.2.3">3</a></div><div class="st300_paragraph">Matrix data is stored in column-major format <span class="st300_footnote_reference">[<a href="#st300_f_1391_0" id="st300_fr_956" title="Jump to footnote conventions.matrices.column_major (reference 0)">2</a>]</span>, in whatever is the platform's native byte order. For an <span class="st300_term expression">m x m</span> square matrix, assuming that each element of the matrix uses <span class="st300_term expression">n</span> bytes, the first byte of the element at row <span class="st300_term expression">r</span> and column <span class="st300_term expression">c</span> (assuming <span class="st300_term expression">0 &lt;= r &lt; m</span> and <span class="st300_term expression">0 &lt;= c &lt; m</span>) can be found by <span class="st300_term expression">(c * m * n) + (r * n)</span>.</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s2ss2c4" href="#st300_p2s2ss2c4" title="Formal item 2.2.2.4: Column-major storage memory layout">2.2.2.4 Column-major storage memory layout</a></div><div class="st300_formal_item_content"><img class="st300_image" alt="Column-major storage memory layout" src="images/memory.png"/></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss2c5" href="#st300_p2s2ss2c5" title="Paragraph 2.2.2.5">5</a></div><div class="st300_paragraph">So, the element at row <span class="st300_term constant">0</span>, column <span class="st300_term constant">0</span> would be stored in bytes <span class="st300_term expression">[0 .. 3]</span>. The element at row <span class="st300_term constant">1</span>, column <span class="st300_term constant">0</span> would be stored in bytes <span class="st300_term expression">[4 .. 7]</span>. The element at row <span class="st300_term constant">0</span>, column <span class="st300_term constant">1</span> would be stored in bytes <span class="st300_term expression">[16 .. 19]</span>, and so on.</div></div></div><div class="st300_subsection_container"><a id="conventions.matrices.phantom"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss3" href="#st300_p2s2ss3" title="Subsection 2.2.3: Phantom Types">2.2.3</a></div><div class="st300_subsection_title">Phantom Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss3c1" href="#st300_p2s2ss3c1" title="Paragraph 2.2.3.1">1</a></div><div class="st300_paragraph">As with the vector types, the <span class="st300_term package">com.io7m.jtensors</span> package provides copies of all of the existing matrix types indexed by a pair of <span class="st300_term term">phantom type parameters</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss3c2" href="#st300_p2s2ss3c2" title="Paragraph 2.2.3.2">2</a></div><div class="st300_paragraph">Conceptually, a matrix can be considered as storing a transform from coordinate space <span class="st300_term expression">T0</span> to space <span class="st300_term expression">T1</span>. For a 4x4 matrix in the <span class="st300_term package">com.io7m.jtensors</span> package, this is denoted by the type <span class="st300_term expression">PMatrix4x4D&lt;T0,T1&gt;</span>. It then follows that when matrices are concatenated via multiplications, their type parameters are translated accordingly. For example, a matrix <span class="st300_term expression">PMatrix4x4D&lt;T0,T1&gt;</span> multiplied by a matrix <span class="st300_term expression">PMatrix4x4D&lt;T1,T2&gt;</span> results in a matrix of type <span class="st300_term expression">PMatrix4x4D&lt;T0,T2&gt;</span>. Inverting a matrix results in a matrix that represents the inverse of the original transform that the matrix represented. For example, inverting a matrix of type <span class="st300_term expression">PMatrix4x4D&lt;T0,T1&gt;</span> results in a matrix of type <span class="st300_term expression">PMatrix4x4D&lt;T1,T0&gt;</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss3c3" href="#st300_p2s2ss3c3" title="Paragraph 2.2.3.3">3</a></div><div class="st300_paragraph">Type parameters are also translated across multiplications by vectors. A multiplication of a vector of type <span class="st300_term expression">PVector4D&lt;T0&gt;</span> by a matrix of type <span class="st300_term expression">PMatrix4x4D&lt;T0,T1&gt;</span> results in a vector of type <span class="st300_term expression">PVector4D&lt;T1&gt;</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss3c4" href="#st300_p2s2ss3c4" title="Paragraph 2.2.3.4">4</a></div><div class="st300_paragraph">Being able to track the types of transforms at this level of detail is invaluable when using systems such as OpenGL, where accidentally mixing up matrices tends to result in visual anomalies that can be extremely hard to track down. By explicitly denoting coordinate spaces with empty types, it's possible to statically prevent all bugs involving accidentally mixing up matrices. It's also possible to prevent the incorrect construction of matrices <span class="st300_footnote_reference">[<a href="#st300_f_1405_0" id="st300_fr_1365" title="Jump to footnote conventions.matrices.phantom.incorrect (reference 0)">3</a>]</span>. Additionally, with each matrix labelled by the type of transform it represents, code becomes self-documenting.</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s2ss3c5" href="#st300_p2s2ss3c5" title="Formal item 2.2.3.5: Static tracking of transforms">2.2.3.5 Static tracking of transforms</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">interface WorldSpace { }
interface ViewSpace { }
interface ObjectSpace { }

PMatrix4x4D&lt;ObjectSpace, WorldSpace&gt; matrix_model;
PMatrix4x4D&lt;WorldSpace, ViewSpace&gt; matrix_view;
PMatrix4x4D&lt;ObjectSpace, ViewSpace&gt; matrix_modelview;

// Correct!
matrix_modelview = PMatrices4x4D.multiply (matrix_view, matrix_model);

// Correct!
Optional&lt;PMatrix4x4D&lt;ViewSpace, WorldSpace&gt;&gt; matrix_view_inverse =
  PMatrices4x4D.invert(matrix_view);

// Compilation error: The resulting matrix would be of type PMatrix4x4D&lt;ViewSpace, ObjectSpace&gt;
// matrix_modelview = PMatrices4x4D.multiply (matrix_model, matrix_view);
</pre></div></div></div></div><div class="st300_section_container"><a id="conventions.quaternions"/><div class="st300_section_title_number"><a id="st300_p2s3" href="#st300_p2s3" title="Section 2.3: Quaternions">2.3</a></div><div class="st300_section_title">Quaternions</div><span/><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s3ss3c1" href="#st300_p2s3ss3c1" title="Paragraph 2.3.3.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides quaternions with single-precision <span class="st300_term type">(float)</span> elements, and double-precision <span class="st300_term type">(double)</span> elements. The package unambiguously identifies the quaternion types by using the following naming conventions for the types (given as a simple EBNF grammar) :</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s3ss3c2" href="#st300_p2s3ss3c2" title="Paragraph 2.3.3.2">2</a></div><div class="st300_paragraph">The available quaternion types include:</div></div><div class="st300_formal_item"><a id="conventions.quaternions.available"/><div class="st300_formal_item_title"><a id="st300_p2s3ss3c3" href="#st300_p2s3ss3c3" title="Formal item 2.3.3.3: Quaternion types">2.3.3.3 Quaternion types</a></div><div class="st300_formal_item_content"><ul class="st300_list_unordered"><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/quaternions/Quaternion4D.html">Quaternion4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/quaternions/Quaternion4F.html">Quaternion4F</a></li></ul></div></div></div></div><div class="st300_part_container"><a id="api"/><div class="st300_part_title_number"><a id="st300_p3" href="#st300_p3" title="Part 3: API">3</a></div><div class="st300_part_title">API</div><ul class="st300_contents st300_part_contents_outer st300_part_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_section"><a href="#st300_p3s1" title="Link to section 3.1: JavaDoc">3.1. JavaDoc</a></li></ul><div class="st300_section_container"><a id="api.javadoc"/><div class="st300_section_title_number"><a id="st300_p3s1" href="#st300_p3s1" title="Section 3.1: JavaDoc">3.1</a></div><div class="st300_section_title">JavaDoc</div><span/><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p3s1c1" href="#st300_p3s1c1" title="Paragraph 3.1.1">1</a></div><div class="st300_paragraph">API documentation for the package is provided via the included <a class="st300_link_external" href="apidocs">Javadoc</a>.</div></div></div></div><div class="st300_footnotes"><hr/><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_250_0" href="#st300_fr_208" title="Jump back to reference 0 of footnote semver">0</a>]</div><div class="st300_footnote_body"><a class="st300_link_external" href="http://semver.org">http://semver.org</a></div></div><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_669_0" href="#st300_fr_667" title="Jump back to reference 0 of footnote conventions.vectors.phantom.article">1</a>]</div><div class="st300_footnote_body">See <a class="st300_link_external" href="http://io7m.com/documents/tt1-pt/">http://io7m.com/documents/tt1-pt/</a>.</div></div><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_1391_0" href="#st300_fr_956" title="Jump back to reference 0 of footnote conventions.matrices.column_major">2</a>]</div><div class="st300_footnote_body">The convention used by most programs using the <a class="st300_link_external" href="http://opengl.org">OpenGL</a> API.</div></div><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_1405_0" href="#st300_fr_1365" title="Jump back to reference 0 of footnote conventions.matrices.phantom.incorrect">3</a>]</div><div class="st300_footnote_body">It is common for people to make mistakes with matrix multiplication: The order of matrices is effectively the reverse of the order in which the transforms will be applied.</div></div></div></div></body></html>
