<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>com.io7m.jtensors 9.0.0 Documentation: 2.1. Vectors</title><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/><link rel="stylesheet" type="text/css" href="kstructural-layout.css"/><link rel="stylesheet" type="text/css" href="kstructural-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st300_body"><div class="st300_navbar st300_navbar_top"><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_title_cell">2. Conventions</td><td class="st300_navbar_up_title_cell">2. Conventions</td><td class="st300_navbar_next_title_cell">2.2. Matrices</td></tr><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2.xhtml#st300_p2" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s2.xhtml#st300_p2s2" title="Go to next page">Next</a></td></tr></table><hr class="st300_hr"/></div><div class="st300_section_container"><a id="conventions.vectors"/><div class="st300_section_title_number"><a id="st300_p2s1" href="#st300_p2s1" title="Section 2.1: Vectors">2.1</a></div><div class="st300_section_title">Vectors</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s1.xhtml#st300_p2s1ss1" title="Link to subsection 2.1.1: Computation Types">2.1.1. Computation Types</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s1.xhtml#st300_p2s1ss2" title="Link to subsection 2.1.2: Storage Types">2.1.2. Storage Types</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s1.xhtml#st300_p2s1ss3" title="Link to subsection 2.1.3: Phantom Types">2.1.3. Phantom Types</a></li></ul><div class="st300_subsection_container"><a id="conventions.vectors.computation_types"/><div class="st300_subsection_title_number"><a id="st300_p2s1ss1" href="#st300_p2s1ss1" title="Subsection 2.1.1: Computation Types">2.1.1</a></div><div class="st300_subsection_title">Computation Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss1c1" href="#st300_p2s1ss1c1" title="Paragraph 2.1.1.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides <span class="st300_term term">computation</span> vectors with single-precision <span class="st300_term type">(float)</span> elements, double-precision <span class="st300_term type">(double)</span> elements, integer <span class="st300_term type">(int)</span>, and long integer <span class="st300_term type">(long)</span> elements. Each vector type is available in two, three, and four element versions. The package unambiguously identifies the vector types by using the following naming conventions for the types (given as a simple EBNF grammar) :</div></div><div class="st300_formal_item"><a id="conventions.vectors.naming"/><div class="st300_formal_item_title"><a id="st300_p2s1ss1c2" href="#st300_p2s1ss1c2" title="Formal item 2.1.1.2: Vector type naming">2.1.1.2 Vector type naming</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">prefix       = "Vector" | "PVector" ;
size         = "2" | "3" | "4" ;
element_type = "I" | "L" | "F" | "D" ;
type         = prefix , size , element_type ;
</pre></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss1c3" href="#st300_p2s1ss1c3" title="Paragraph 2.1.1.3">3</a></div><div class="st300_paragraph">Computation vectors are always immutable and are defined in such a way to allow the Java virtual machine to efficiently inline all vector method calls and to eliminate the allocations of intermediate vectors via <span class="st300_term term">escape analysis</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss1c4" href="#st300_p2s1ss1c4" title="Paragraph 2.1.1.4">4</a></div><div class="st300_paragraph">The available vector types include:</div></div><div class="st300_formal_item"><a id="conventions.vectors.available"/><div class="st300_formal_item_title"><a id="st300_p2s1ss1c5" href="#st300_p2s1ss1c5" title="Formal item 2.1.1.5: Vector types">2.1.1.5 Vector types</a></div><div class="st300_formal_item_content"><ul class="st300_list_unordered"><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2D.html">Vector2D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3D.html">Vector3D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4D.html">Vector4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2F.html">Vector2F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3F.html">Vector3F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4F.html">Vector4F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2I.html">Vector2I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3I.html">Vector3I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4I.html">Vector4I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector2L.html">Vector2L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector3L.html">Vector3L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/unparameterized/vectors/Vector4L.html">Vector4L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2D.html">PVector2D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3D.html">PVector3D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4D.html">PVector4D</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2F.html">PVector2F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3F.html">PVector3F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4F.html">PVector4F</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2I.html">PVector2I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3I.html">PVector3I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4I.html">PVector4I</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector2L.html">PVector2L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector3L.html">PVector3L</a></li><li class="st300_list_item"><a class="st300_link_external" href="apidocs/com/io7m/jtensors/core/parameterized/vectors/PVector4L.html">PVector4L</a></li></ul></div></div></div><div class="st300_subsection_container"><a id="conventions.vectors.storage_types"/><div class="st300_subsection_title_number"><a id="st300_p2s1ss2" href="#st300_p2s1ss2" title="Subsection 2.1.2: Storage Types">2.1.2</a></div><div class="st300_subsection_title">Storage Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss2c1" href="#st300_p2s1ss2c1" title="Paragraph 2.1.2.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package provides mutable <span class="st300_term term">storage</span> vectors. A <span class="st300_term term">storage</span> vector is a mutable vector upon which only very simple <span class="st300_term term">get</span> and <span class="st300_term term">set</span> operations are defined. The intention is to allow all intermediate computations to be written with immutable <a class="st300_link" href="p2s1.xhtml#conventions.vectors.computation_types">computation</a> vectors, with the final results of those computations being written to storage vectors in order to, for example, be passed directly to native code without requiring copying.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss2c2" href="#st300_p2s1ss2c2" title="Paragraph 2.1.2.2">2</a></div><div class="st300_paragraph">To enumerate the available storage vector types, see the API documentation for the <a class="st300_link_external" href="apidocs/com/io7m/jtensors/storage/api/VectorStorageType.html">VectorStorageType</a> interface.</div></div></div><div class="st300_subsection_container"><a id="conventions.vectors.phantom"/><div class="st300_subsection_title_number"><a id="st300_p2s1ss3" href="#st300_p2s1ss3" title="Subsection 2.1.3: Phantom Types">2.1.3</a></div><div class="st300_subsection_title">Phantom Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s1ss3c1" href="#st300_p2s1ss3c1" title="Paragraph 2.1.3.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">com.io7m.jtensors</span> package also provides copies of the existing vector types indexed by a phantom type parameter in order to allow the programmer to make semantically distinct values type-incompatible <span class="st300_footnote_reference">[<a href="p2s1.xhtml#st300_f_669_0" id="st300_fr_667" title="Jump to footnote conventions.vectors.phantom.article (reference 0)">1</a>]</span>.</div></div></div><div class="st300_footnotes"><hr/><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_669_0" href="p2s1.xhtml#st300_fr_667" title="Jump back to reference 0 of footnote conventions.vectors.phantom.article">1</a>]</div><div class="st300_footnote_body">See <a class="st300_link_external" href="http://io7m.com/documents/tt1-pt/">http://io7m.com/documents/tt1-pt/</a>.</div></div></div></div><div class="st300_navbar st300_navbar_bottom"><hr class="st300_hr"/><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2.xhtml#st300_p2" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s2.xhtml#st300_p2s2" title="Go to next page">Next</a></td></tr><tr><td class="st300_navbar_prev_title_cell">2. Conventions</td><td class="st300_navbar_up_title_cell">2. Conventions</td><td class="st300_navbar_next_title_cell">2.2. Matrices</td></tr></table></div></div></body></html>
