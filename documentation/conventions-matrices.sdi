[section [title Matrices] [id conventions.matrices]]

[subsection [title Computation Types] [id conventions.matrices.computation_types]]
[paragraph]
The [term [type package] com.io7m.jtensors] package provides square
[term [type term] computation] matrices with
single-precision [term [type type] "(float)"] elements, and double-precision
[term [type type] "(double)"] elements. Each matrix type is
available in 2x2, 3x3, and 4x4 versions.
The package unambiguously identifies the matrix types by using the following
naming conventions for the types "(given as a simple EBNF grammar)":

[formal-item [title Matrix type naming] [id conventions.matrices.naming]]
[verbatim [include "matrices.ebnf"]]

[paragraph]
Computation matrices are always immutable and are defined in such a way
to allow the Java virtual machine to efficiently inline all matrix method calls
and to eliminate the allocations of intermediate matrices via
[term [type term] escape analysis].

[paragraph]
The available matrix types include:

[formal-item [title Matrix types] [id conventions.matrices.available]]
[list-unordered
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix2D.html"] Matrix2x2D]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix3D.html"] Matrix3x3D]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix4D.html"] Matrix4x4D]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix2F.html"] Matrix2x2F]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix3F.html"] Matrix3x3F]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/unparameterized/matrices/Matrix4F.html"] Matrix4x4F]]

  [item [link-ext [target "apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix2D.html"] PMatrix2x2D]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix3D.html"] PMatrix3x3D]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix4D.html"] PMatrix4x4D]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix2F.html"] PMatrix2x2F]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix3F.html"] PMatrix3x3F]]
  [item [link-ext [target "apidocs/com/io7m/jtensors/core/parameterized/matrices/PMatrix4F.html"] PMatrix4x4F]]]


[subsection [title Storage Types] [id conventions.matrices.storage_types]]
[paragraph]
The [term [type package] com.io7m.jtensors] package provides mutable
[term [type term] storage] matrices. A [term [type term] storage] matrix is
a mutable matrix upon which only very simple [term [type term] get] and
[term [type term] set] operations are defined. The intention is to allow
all intermediate computations to be written with immutable
[link [target conventions.matrices.computation_types] computation] matrices,
with the final results of those computations being written to
storage matrices in order to, for example, be passed directly to native code
without requiring copying.

[paragraph]
To enumerate the available storage matrix types, see the API documentation
for the [link-ext [target "apidocs/com/io7m/jtensors/storage/api/MatrixStorageType.html"] MatrixStorageType]
interface.

[paragraph]
Matrix data is stored in column-major format [footnote-ref conventions.matrices.column_major],
in whatever is the platform's native byte order. For an [term [type expression] m x m]
square matrix, assuming that each element of the matrix uses [term [type expression] n] bytes,
the first byte of the element at row [term [type expression] r] and column
[term [type expression] c] "(assuming" [term [type expression] "0 <= r < m"] and [term [type expression] "0 <= c < m"]")"
can be found by [term [type expression] "(c * m * n) + (r * n)"].

[formal-item [title Column-major storage memory layout]]
[image [target "images/memory.png"] Column-major storage memory layout]

[paragraph]
So, the element at row [term [type constant] 0], column [term [type constant] 0]
would be stored in bytes [term [type expression] "[0 .. 3]"].
The element at row [term [type constant] 1], column [term [type constant] 0]
would be stored in bytes [term [type expression] "[4 .. 7]"].
The element at row [term [type constant] 0], column [term [type constant] 1]
would be stored in bytes [term [type expression] "[16 .. 19]"], and so on.


[subsection [title Phantom Types] [id conventions.matrices.phantom]]
[paragraph]
As with the vector types, the [term [type package] com.io7m.jtensors]
package provides copies of all of the existing matrix types
indexed by a pair of [term [type term] phantom type parameters].

[paragraph]
Conceptually, a matrix can be considered as storing a transform from coordinate
space [term [type expression] T0] to space [term [type expression] T1]. For a
4x4 matrix in the [term [type package] com.io7m.jtensors] package, this is
denoted by the type [term [type expression] "PMatrix4x4D<T0,T1>"]. It then
follows that when matrices are concatenated via multiplications, their type
parameters are translated accordingly.
For example, a matrix [term [type expression] "PMatrix4x4D<T0,T1>"] multiplied
by a matrix [term [type expression] "PMatrix4x4D<T1,T2>"] results in a matrix
of type [term [type expression] "PMatrix4x4D<T0,T2>"]. Inverting a matrix
results in a matrix that represents the inverse of the original transform
that the matrix represented. For example, inverting a matrix of type
[term [type expression] "PMatrix4x4D<T0,T1>"] results in a matrix of type
[term [type expression] "PMatrix4x4D<T1,T0>"].

[paragraph]
Type parameters are also translated across multiplications by vectors. A
multiplication of a vector of type [term [type expression] "PVector4D<T0>"] by
a matrix of type [term [type expression] "PMatrix4x4D<T0,T1>"] results in a
vector of type [term [type expression] "PVector4D<T1>"].

[paragraph]
Being able to track the types of transforms at this level of detail is invaluable
when using systems such as OpenGL, where accidentally mixing up matrices tends
to result in visual anomalies that can be extremely hard to track down. By
explicitly denoting coordinate spaces with empty types, it's possible to
statically prevent all bugs involving accidentally mixing up matrices. It's
also possible to prevent the incorrect construction of matrices
[footnote-ref conventions.matrices.phantom.incorrect].
Additionally, with each matrix labelled by the type of transform it represents,
code becomes self-documenting.

[formal-item [title Static tracking of transforms]]
[verbatim [include "phantom-example.txt"]]

[footnote [id conventions.matrices.column_major]]
The convention used by most programs using the
[link-ext [target "http://opengl.org"] OpenGL] API.

[footnote [id conventions.matrices.phantom.incorrect]]
It is common for people to make mistakes with matrix multiplication: The order
of matrices is effectively the reverse of the order in which the transforms
will be applied.

